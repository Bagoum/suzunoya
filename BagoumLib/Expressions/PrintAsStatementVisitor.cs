using System;
using System.Linq.Expressions;
using JetBrains.Annotations;
using static BagoumLib.Expressions.PrintToken;

namespace BagoumLib.Expressions {
/// <summary>
/// A visitor that transforms the provided expression into a statement (ie. succeeds it with a semicolon).
/// </summary>
public class PrintAsStatementVisitor : DerivativePrintVisitor {
    /// <inheritdoc/>
    public override PrintAsStatementVisitor Stmter => this;
    /// <summary>
    /// Create a <see cref="PrintAsStatementVisitor"/>
    /// </summary>
    public PrintAsStatementVisitor(PrintVisitor parent) : base(parent) { }

    /// <inheritdoc/>
    public override Expression? Visit(Expression? node) {
        if (node == null) return node;
        switch (node) {
            case BlockExpression:
                return parent.Visit(node);
            case LoopExpression:
            case SwitchExpression:
            case TryExpression:
                parent.Visit(node);
                Add(newline);
                return node;
            case ConditionalExpression ce: 
                //can't use ternary for statements
                parent.VisitConditionalAsIfElse(ce);
                Add(newline);
                return ce;
            case ParameterExpression or ConstantExpression: 
                //simple expressions can't be statements
                return node;
        }
        //This can get autogenerated sometimes
        if (node is DefaultExpression d && d.Type == typeof(void))
            return node;
        //Labels are also printed with semicolons. This is not required, but helps avoid end-of-function labels.
        parent.Visit(node);
        Add(semicolon, newline);
        return node;
    }
}
}